import { z } from 'zod';

// Add new schema for property data with planning layers
export const PropertyDataWithPlanningSchema = z.object({
  coordinates: z.object({
    longitude: z.number(),
    latitude: z.number(),
  }),
  planningLayers: z.object({
    epiLayers: z.array(z.object({
      layer: z.string(),
      attributes: z.record(z.any()),
    })),
    protectionLayers: z.array(z.object({
      layer: z.string(),
      attributes: z.record(z.any()),
    })),
    localProvisionsLayers: z.array(z.object({
      layer: z.string(),
      attributes: z.record(z.any()),
    })),
  }),
});

export const DevelopmentDataSchema = z.object({
  developmentDescription: z.string(),
  demolitionRequired: z.boolean(),
  demolitionDetails: z.string().optional(),
  storeys: z.string(),
  buildingHeight: z.string(),
  wallHeight: z.string(),
  frontSetback: z.string(),
  secondaryFrontSetback: z.string().optional(),
  rearSetbackGround: z.string(),
  rearSetbackUpper: z.string().optional(),
  sideSetbackGroundOne: z.string(),
  sideSetbackGroundTwo: z.string(),
  sideSetbackUpperOne: z.string(),
  sideSetbackUpperTwo: z.string(),
  garageSetback: z.string(),
  existingGFA: z.string().optional(),
  proposedGFA: z.string(),
  totalGFA: z.string(),
  floorSpaceRatio: z.string(),
  existingSiteCoverage: z.string().optional(),
  proposedSiteCoverage: z.string(),
  existingLandscapedArea: z.string().optional(),
  proposedLandscapedArea: z.string(),
  landscapedAreaPercentage: z.string(),
  existingDeepSoilArea: z.string().optional(),
  proposedDeepSoilArea: z.string(),
  deepSoilAreaPercentage: z.string(),
  existingPrivateOpenSpaceArea: z.string().optional(),
  proposedPrivateOpenSpaceArea: z.string(),
  maxCut: z.string(),
  maxFill: z.string(),
  externalWalls: z.string(),
  roof: z.string(),
  windows: z.string(),
  otherMaterials: z.string().optional(),
  vehicleAccess: z.string(),
  carParkingSpaces: z.string(),
  pedestrianAccess: z.string(),
  stormwaterDisposal: z.string(),
  wasteManagement: z.string(),
});

export const ProjectDataSchema = z.object({
  projectName: z.string(),
  address: z.string(),
  developmentType: z.string(),
  customDevelopmentType: z.string().optional(),
  councilArea: z.string(),
});

export const PropertyDataSchema = z.object({
  lotNumber: z.string(),
  sectionNumber: z.string().optional(),
  dpNumber: z.string(),
  streetNumber: z.string(),
  streetName: z.string(),
  secondaryStreetName: z.string().optional(),
  suburb: z.string(),
  postcode: z.string(),
  lotType: z.string(),
  siteArea: z.string(),
  primaryStreetWidth: z.string(),
  siteDepth: z.string(),
  secondaryStreetWidth: z.string().optional(),
  gradient: z.string(),
  highestRL: z.string().optional(),
  lowestRL: z.string().optional(),
  fallAmount: z.string().optional(),
  currentLandUse: z.string(),
  existingDevelopmentDetails: z.string().optional(),
  northDevelopment: z.string().optional(),
  southDevelopment: z.string().optional(),
  eastDevelopment: z.string().optional(),
  westDevelopment: z.string().optional(),
  constraints: z
    .object({
      bushfireProne: z.boolean().optional(),
      floodProne: z.boolean().optional(),
      acidSulfateSoils: z.boolean().optional(),
      biodiversity: z.boolean().optional(),
      heritageItem: z.boolean().optional(),
      heritageConservationArea: z.boolean().optional(),
      contaminatedLand: z.boolean().optional(),
    })
    .optional(),
  otherConstraints: z.string().optional(),
});

export const PropertyDetailsFormSchema = z.object({
  lotIdentifications: z
    .array(
      z.object({
        lotNumber: z.string().min(1, 'Lot number is required'),
        sectionNumber: z.string().optional(),
        dpNumber: z.string().min(1, 'DP/SP number is required'),
      })
    )
    .min(1, 'At least one lot identification is required'),
  streetNumber: z.string().min(1, 'Street number is required'),
  streetName: z.string().min(1, 'Street name is required'),
  secondaryStreetName: z.string().optional(),
  suburb: z.string().min(1, 'Suburb is required'),
  postcode: z.string().min(1, 'Postcode is required'),
});

export const PlanningDataSchema = z.object({
  zoning: z.string(),
  landUsePermissibility: z.string(),
  lepName: z.string(),
  lepCompliance: z.string(),
  heightControl: z.string(),
  heightProposed: z.string(),
  heightCompliance: z.boolean(),
  fsrControl: z.string(),
  fsrProposed: z.string(),
  fsrCompliance: z.boolean(),
  dcpName: z.string(),
  dcpCompliance: z.string(),
  frontSetbackControl: z.string(),
  frontSetbackProposed: z.string(),
  frontSetbackCompliance: z.boolean(),
  secondaryFrontSetbackControl: z.string().optional(),
  secondaryFrontSetbackProposed: z.string().optional(),
  secondaryFrontSetbackCompliance: z.boolean(),
  rearSetbackGroundControl: z.string(),
  rearSetbackGroundProposed: z.string(),
  rearSetbackGroundCompliance: z.boolean(),
  rearSetbackUpperControl: z.string().optional(),
  rearSetbackUpperProposed: z.string().optional(),
  rearSetbackUpperCompliance: z.boolean(),
  sideSetbackNorthGroundControl: z.string(),
  sideSetbackNorthGroundProposed: z.string(),
  sideSetbackNorthGroundCompliance: z.boolean(),
  sideSetbackNorthUpperControl: z.string().optional(),
  sideSetbackNorthUpperProposed: z.string().optional(),
  sideSetbackNorthUpperCompliance: z.boolean(),
  sideSetbackSouthGroundControl: z.string(),
  sideSetbackSouthGroundProposed: z.string(),
  sideSetbackSouthGroundCompliance: z.boolean(),
  sideSetbackSouthUpperControl: z.string().optional(),
  sideSetbackSouthUpperProposed: z.string().optional(),
  sideSetbackSouthUpperCompliance: z.boolean(),
  siteCoverageControl: z.string(),
  siteCoverageProposed: z.string(),
  siteCoverageCompliance: z.boolean(),
  landscapedAreaControl: z.string(),
  landscapedAreaProposed: z.string(),
  landscapedAreaCompliance: z.boolean(),
  parkingControl: z.string(),
  parkingProposed: z.string(),
  parkingCompliance: z.boolean(),
  seppBiodiversity: z.boolean(),
  seppBiodiversityTreeRemoval: z.boolean(),
  seppResilience: z.boolean(),
  seppBasix: z.boolean(),
  seppTransport: z.boolean(),
  seppTransportClassifiedRoad: z.boolean(),
  seppHousing: z.boolean(),
  seppHousingSecondaryDwelling: z.boolean(),
  secondaryDwellingFloorArea: z.string().optional(),
  maxFloorAreaByLEP: z.string().optional(),
  additionalPlanning: z.string().optional(),
  variationsRequired: z.boolean().optional(),
  variationDetails: z.string().optional(),
  variationJustification: z.string().optional(),
  // Add the dynamic arrays to match PlanningFormSchema
  additionalControls: z
    .array(
      z.object({
        name: z.string(),
        control: z.string(),
        proposed: z.string(),
      })
    )
    .optional(),
  lepAdditionalControls: z
    .array(
      z.object({
        name: z.string(),
        control: z.string(),
        proposed: z.string(),
      })
    )
    .optional(),
});

export const PlanningFormSchema = z.object({
  zoning: z.string().optional(),
  landUsePermissibility: z.string().optional(),
  lepName: z.string().optional(),
  lepCompliance: z.string().optional(),
  heightControl: z.string().optional(),
  heightProposed: z.string().optional(),
  heightCompliance: z.boolean().optional(),
  fsrControl: z.string().optional(),
  fsrProposed: z.string().optional(),
  fsrCompliance: z.boolean().optional(),
  dcpName: z.string().optional(),
  dcpCompliance: z.string().optional(),
  frontSetbackControl: z.string().optional(),
  frontSetbackProposed: z.string().optional(),
  frontSetbackCompliance: z.boolean().optional(),
  secondaryFrontSetbackControl: z.string().optional(),
  secondaryFrontSetbackProposed: z.string().optional(),
  secondaryFrontSetbackCompliance: z.boolean().optional(),
  rearSetbackGroundControl: z.string().optional(),
  rearSetbackGroundProposed: z.string().optional(),
  rearSetbackGroundCompliance: z.boolean().optional(),
  rearSetbackUpperControl: z.string().optional(),
  rearSetbackUpperProposed: z.string().optional(),
  rearSetbackUpperCompliance: z.boolean().optional(),
  sideSetbackNorthGroundControl: z.string().optional(),
  sideSetbackNorthGroundProposed: z.string().optional(),
  sideSetbackNorthGroundCompliance: z.boolean().optional(),
  sideSetbackNorthUpperControl: z.string().optional(),
  sideSetbackNorthUpperProposed: z.string().optional(),
  sideSetbackNorthUpperCompliance: z.boolean().optional(),
  sideSetbackSouthGroundControl: z.string().optional(),
  sideSetbackSouthGroundProposed: z.string().optional(),
  sideSetbackSouthGroundCompliance: z.boolean().optional(),
  sideSetbackSouthUpperControl: z.string().optional(),
  sideSetbackSouthUpperProposed: z.string().optional(),
  sideSetbackSouthUpperCompliance: z.boolean().optional(),
  siteCoverageControl: z.string().optional(),
  siteCoverageProposed: z.string().optional(),
  siteCoverageCompliance: z.boolean().optional(),
  landscapedAreaControl: z.string().optional(),
  landscapedAreaProposed: z.string().optional(),
  landscapedAreaCompliance: z.boolean().optional(),
  parkingControl: z.string().optional(),
  parkingProposed: z.string().optional(),
  parkingCompliance: z.boolean().optional(),
  seppBiodiversity: z.boolean().optional(),
  seppBiodiversityTreeRemoval: z.boolean().optional(),
  seppResilience: z.boolean().optional(),
  seppBasix: z.boolean().optional(),
  seppTransport: z.boolean().optional(),
  seppTransportClassifiedRoad: z.boolean().optional(),
  seppHousing: z.boolean().optional(),
  seppHousingSecondaryDwelling: z.boolean().optional(),
  secondaryDwellingFloorArea: z.string().optional(),
  maxFloorAreaByLEP: z.string().optional(),
  additionalPlanning: z.string().optional(),
  variationsRequired: z.boolean().optional(),
  variationDetails: z.string().optional(),
  variationJustification: z.string().optional(),
  // Add the dynamic arrays
  additionalControls: z
    .array(
      z.object({
        name: z.string(),
        control: z.string(),
        proposed: z.string(),
      })
    )
    .optional(),
  lepAdditionalControls: z
    .array(
      z.object({
        name: z.string(),
        control: z.string(),
        proposed: z.string(),
      })
    )
    .optional(),
});

export const EnvironmentalDataSchema = z.object({
  contextAndSetting: z.object({
    noise: z.string(),
    overlooking: z.string(),
    overshadowing: z.string(),
    buildingHeight: z.string(),
    setbacksAndLandscaping: z.string(),
    architecturalStyle: z.string(),
  }),
  accessTransportTraffic: z.string(),
  publicDomain: z.string(),
  utilities: z.string(),
  heritage: z.string(),
  otherLandResources: z.string(),
  water: z.string(),
  soils: z.string(),
  airAndMicroclimate: z.string(),
  floraAndFauna: z.string(),
  treeRemoval: z.boolean(),
  treeRemovalCount: z.string().optional(),
  waste: z.string(),
  energy: z.string(),
  noiseAndVibration: z.string(),
  naturalHazards: z.string(),
  bushfireProne: z.boolean(),
  floodProne: z.boolean(),
  technologicalHazards: z.string(),
  safetySecurity: z.string(),
  socialEconomicImpact: z.string(),
  siteDesign: z.string(),
  construction: z.string(),
  constructionHours: z.string(),
  erosionControl: z.string(),
  dustControl: z.string(),
  cumulativeImpacts: z.string(),
  additionalInformation: z.string().optional(),
});

export const FormDataSchema = z.object({
  project: ProjectDataSchema,
  property: PropertyDataSchema,
  development: DevelopmentDataSchema,
  planning: PlanningDataSchema,
  environmental: EnvironmentalDataSchema,
  propertyData: PropertyDataWithPlanningSchema.optional(),
});
